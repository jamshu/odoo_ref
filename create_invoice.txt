def get_customer(self,name):
        if not name:
            raise Warning("Blank Name Customer Cannot Be Created or Searched,Please Check Insurance Company Name")
        partner_pool = self.env['res.partner']
        partner_id = partner_pool.search([('name','=',name),('customer','=',True)])
        if len(partner_id) >1:
            raise Warning("More Partner for the Same Name %s",name)
        if not partner_id:
            field_list= partner_pool.fields_get_keys()
            def_vals = partner_pool.default_get(field_list)
            def_vals['name'] = name
            partner_id=partner_pool.create(def_vals)
        return partner_id
            
    def _get_journal(self):
        journal_pool = self.env['account.journal']
        journal_id = journal_pool.search([('type','=','sale')],limit=1)
        if not journal_id:
            raise Warning("There is No Journal with type Sale ,Pls Configure One")
        return journal_id
    
    def get_product(self,name):
        proudct_pool = self.env['product.product']
        product_id = proudct_pool.search([('name','=',name)])
        if len(product_id)>1:
            raise Warning("More than One Product found for the name %s Pls correct it"%name)
        if not product_id:
            field_list= proudct_pool.fields_get_keys()
            def_vals = proudct_pool.default_get(field_list)
            def_vals['name'] = name
            product_id=proudct_pool.create(def_vals)
        return product_id
    
    
    def get_product_account(self,product):
        return (product.property_account_income and product.property_account_income.id) or (product.categ_id and product.categ_id.property_account_income_categ and  product.categ_id.property_account_income_categ.id) 
    @api.one 
    def create_invoice(self):
        if len(self.line_id) < 1:
            raise Warning("Nothing to Create Invoice,Please Load the Data First")
        invoice_pool = self.env['account.invoice']
        journal_id = self._get_journal()
        for line in self.line_id:
            if line.check:
                partner = self.get_customer(line.insurance_co)
                vals = {
                        'name':line.inv_import_id and line.inv_import_id.invoice_no or '',
                        'date':line.date,
                        'journal_id':journal_id.id,
                        'partner_id':partner.id,
                        'account_id':partner.property_account_receivable_id and partner.property_account_receivable_id.id or False,
                        }
                invoice_line_val  = {}
                if line.product:
                    product = self.get_product(line.product)
                    credit_account_id = self.get_product_account(product)
                    name = product.description_sale or product.name or ''
                    invoice_line_val['product_id'] = product.id
                    invoice_line_val['account_id'] = credit_account_id
                    invoice_line_val['name'] =name
                else:
                    name ='No Product/Description'
                    credit_account_id = journal_id.default_credit_account_id and journal_id.default_credit_account_id.id or False
                    invoice_line_val['account_id'] = credit_account_id
                    invoice_line_val['name'] =name
                invoice_line_val['quantity'] = 1
                invoice_line_val['price_unit'] =line.total
                vals['invoice_line_ids'] = [(0,0,invoice_line_val)]
                invoice = invoice_pool.create(vals)
